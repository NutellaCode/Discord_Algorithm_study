N = int(input())


# length = 3^N
# N은 3의 배수이며 최소 크기는 3x3
#
# # [CASE 1]
# ***
# * *
# ***
#
# 3x3일 경우 위와 같이 가운데 공백을 하나 그려주면 됨
# 3x3 크기이므로 index 범위는 y: 0~2, x: 0~2가 됨
#
# mid index를 구하기 위해 3/2, mid index는 1이 되며,
# (1, 1)을 ' '를 찍어줌
#
# 이를 코드로 표현하면,
# insert_space([y 시작] = 0, [x 시작] = 0, [길이] = 3)
#
#
# [CASE 2]
# 9x9(81)일 경우, 3x3(9)의 9배 크기가 됨(넓이 기준)
# (9x9)를 시각화 하면 아래와 같음
# *********
# *********
# *********
# *********
# *********
# *********
# *********
# *********
# *********
# 1. 먼저 공백을 넣어줌
# 첫 3칸은 별, 가운데 3칸은 공백, 마지막 3칸도 별
# 즉 (3,3) ~ (6,6)까지 별을 그려줌. index로 표기하면 (2,2) ~ (5,5)
# 이를 코드로 표현하면
# y_start + length//3 ~ y_start + (length//3*2)
# x_start + length//3 ~ x_start + (length//3*2)
# y_start는 처음에 0이므로 3 ~ 6이 됨.
# 즉 4번째 index부터 6번쨰 까지. (4, 5, 6)을 나타냄
#
# 그 부분을 공백으로 채운 결과는 아래와 같음
# *********
# *********
# *********
# ***   ***
# ***   ***
# ***   ***
# *********
# *********
# *********
#
# 2. 이제 나머지 영역들을 9등분 해서 재귀를 돌리면 됨
# (공백으로만 이루어진 영역에 공백을 채워도 결과에 영향 없으니 배제 안하고 쪼개줌)
# 위 1번 프로세스를 9개의 작은 3x3으로 쪼개서 실행할 것.
# 그러면 3x3은 가운데인 (2,2), 인덱스로는 (1,1)에 공백이 하나씩 생길 것
# 결과는 아래와 같음
#
# *********
# * ** ** *
# *********
# ***   ***
# * *   * *
# ***   ***
# *********
# * ** ** *
# *********
# ==============================
# 1. '*'로 이루어진 N x N 배열로 초기화
# 별을 먼저 그린 후에 공백을 삽입할 것
BOARD = [["*"]*(N+1) for _ in range(N+1)]
# 직관적인 이해를 위해 1행 1열은 만들기만 하고 버린다.

# 3x3 2차원 배열의 경우 index 0~2이지만
# 1행 1열을 버리면 1~3으로 사용 가능
# 나중에 출력 시 1행 1열을 순회에서 배제하면 됨


def insert_space(y_start, x_start, length):
    # 가로/세로 길이의 3분의 1
    third = length//3

   # 1. 모든 칸을 '*'로 미리 채운 상태
   # 중간을 ' ' 공백으로 비워줌
   #
   # [CASE 1]
   # 3x3인 경우, 열 (1,[2],3), 행 (1,[2],3) 중에서
   # 중간 값인 (2, 2)만 버려줌
   # ***    ***
   # *** -> * *
   # ***    ***
   #
   # [CASE 2]
   # 9x9인 경우,
   # 시작 인덱스 1+ 길이의 3분의 1 = [4] ~ 시작 인덱스 1+ 길이의 3분의 1 x 2 = [7]
   # 즉 행, 열이 [4~6]인 경우(slice이므로 7은 포함x) 공백 삽입
   # 1,2,3 = 별, 4,5,6 = 공백, 7,8,9 = 별이 됨
   # *********    *********
   # *********    *********
   # *********    *********
   # *********    ***   ***
   # ********* -> ***   ***
   # *********    ***   ***
   # *********    *********
   # *********    *********
   # *********    *********
   # 4행 4열, 4행 5열, 4행 6열
   # 5행 4열, 5행 6열, 5행 7열
   # 6행 4열, 6행 5열, 6행 6열
   # 만 공백 처리가 된 것
   #
    for y in range(y_start+third, y_start + third*2):
        for x in range(x_start+third, x_start + third*2):
            BOARD[y][x] = ' '

    # 재귀 종료 조건
    # 3x3이 최소 크기이므로 더 이상 재귀를 호출할 필요 없으므로 종료
    # 만약 이 조건을 삽입하지 않으면 아래에서 index out of bound 오류 발생
    if length == 3:
        return

    # 사각형을 9조각으로 쪼갬
    # 9x9=81, 3x3=9
    # 3배수로 커지는데, 그 때마다 넓이가 딱 9배
    # 그래서 9x9를 쪼개는 과정을 나열하면
    #     123   456   789
    #  1 [***] [***] [***]
    #  2 [***] [***] [***]
    #  3 [***] [***] [***]
    #
    #  4 [***] [   ] [***]
    #  5 [***] [   ] [***]
    #  6 [***] [   ] [***]
    #
    #  7 [***] [***] [***]
    #  8 [***] [***] [***]
    #  9 [***] [***] [***]
    #
    # 9x9 크기의 사각형의 경우,
    # 1~10(9회) 순회하는데, 한 번에 3분의 1인 3씩 증가시킴
    # f(1, 1, 3)
    # f(1, 4, 3)
    # f(1, 7, 3)
    # f(4, 1, 3)
    # f(4, 4, 3) -> 공백이므로 실행 안 됨
    # f(4, 7, 3)
    # f(7, 1, 3)
    # f(7, 4, 3)
    # f(7, 7, 3)
    # []
    for y in range(y_start, y_start+length, third):
        for x in range(x_start, x_start+length, third):
            if BOARD[y][x] != ' ':
                insert_space(y, x, third)


insert_space(1, 1, N)

for y in range(1, N+1):
    for x in range(1, N+1):
        print(BOARD[y][x], end='')
    print()
